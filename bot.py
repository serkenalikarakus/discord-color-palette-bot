import os
import discord
from discord.ext import commands
import logging
from color_utils import generate_palette_from_color, get_color_name
from image_generator import create_palette_image
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize bot with command prefix '!'
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    logger.info(f'Bot is ready! Logged in as {bot.user.name}')

@bot.command(name='palette')
async def palette(ctx, color: str):
    """Generate a color palette from a given color"""
    try:
        # Generate palette
        colors = generate_palette_from_color(color)
        if not colors:
            await ctx.send("Invalid color format. Please use color name (e.g., 'blue') or hex code (e.g., '#FF0000')")
            return

        # Create and save image
        image_path = create_palette_image(colors)

        # Get the public URL (assuming Flask server is running)
        public_url = f"http://0.0.0.0:5000/palettes/{os.path.basename(image_path)}"

        # Create embed with better formatting
        embed = discord.Embed(
            title="Color Palette Generator",
            description=f"Generated from: {color}\n\n**Color Harmony Details:**",
            color=int(colors[0].replace("#", ""), 16)
        )

        # Format color codes nicely with names
        color_list = []
        for i, c in enumerate(colors):
            color_name = get_color_name(c) or "Custom Color"
            color_list.append(f"â€¢ `{c}` - {color_name} ({i+1})")

        embed.add_field(name="Colors in Palette", value="\n".join(color_list), inline=False)

        # Add descriptions for the colors
        descriptions = [
            "Base Color",
            "Analogous Color (-60Â°)",
            "Analogous Color (-30Â°)",
            "Analogous Color (+30Â°)",
            "Analogous Color (+60Â°)",
            "Complementary Color",
            "Split Complementary (-150Â°)",
            "Split Complementary (+150Â°)",
            "Darker Shade (-40%)",
            "Slight Shade (-20%)",
            "Light Tint (+20%)",
            "Bright Tint (+40%)"
        ]
        desc_text = "\n".join([f"{i+1}. {desc}" for i, desc in enumerate(descriptions)])
        embed.add_field(name="Color Descriptions", value=desc_text, inline=False)

        embed.set_image(url=public_url)
        embed.set_footer(text="Use !help_palette for more information | ðŸŽ¨ Generated by Colormatic")

        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Error generating palette: {str(e)}")
        await ctx.send("An error occurred while generating the palette.")

@bot.command(name='help_palette')
async def help_palette(ctx):
    """Show help information for the palette command"""
    embed = discord.Embed(
        title="Color Palette Generator Help",
        description="Generate beautiful and harmonious color palettes from any color!",
        color=0x3498db
    )

    embed.add_field(
        name="Commands",
        value="""
        `!palette <color>`: Generate a palette from a color
        `!help_palette`: Show this help message
        """,
        inline=False
    )

    embed.add_field(
        name="Color Input Formats",
        value="""
        â€¢ Color name (e.g., `!palette blue`, `!palette red`)
        â€¢ Hex code (e.g., `!palette #FF0000`, `!palette #00ff00`)
        """,
        inline=False
    )

    embed.add_field(
        name="Generated Palette Contains",
        value="""
        1. Your base color
        2. Four analogous colors
        3. Complementary color
        4. Two split complementary colors
        5. Four shades/tints variations
        """,
        inline=False
    )

    embed.set_footer(text="Try it now with your favorite color!")

    await ctx.send(embed=embed)

if __name__ == "__main__":
    load_dotenv()
    token = os.getenv("DISCORD_TOKEN")
    if not token:
        logger.error("No Discord token found!")
        exit(1)
    bot.run(token)